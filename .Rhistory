cd()
using(devtools)
check('.')
?test_that
matches
equals
is_identical_to
?has_attr
attr
?attr
?inherits
inherits(1, NULL)
?is
is(1, null)
is(1, NULL)
attributes
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% a){
if(class == 'any') return(TRUE)
else return(inherits(a[[name]], class))
}
FALSE
}
}
??option
??with_option
with_option
using(devtools)
with_options
withseed
load_all('.')
seed <- gather(1)
expect_that(withseed(seed, runif(1), time=T))
withseed(seed, runif(1), time=T)
seed <- gather(1)[[1]]
expect_that(withseed(seed, runif(1), time=T), has_attr())
withseed(seed, runif(1), time=T)
expect_that(withseed(seed, runif(1), time=T), has_attr('time', 'proc.time'))
debug(has_attr)
expect_that(withseed(seed, runif(1), time=T), has_attr('time', 'proc.time'))
options(error=recover)
expect_that(withseed(seed, runif(1), time=T), has_attr('time', 'proc.time'))
ls()
ls()
info
results
Q
matches
with_options
?set
set
using(devtools)
set
setOption
?options
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% a){
if(class == 'any') {
return(TRUE)
} else {
if(inherits(a[[name]], class)) {
TRUE
} else {
sprintf("has '%s' attribute but it is not of class '%s'."
, name, class)
}
}
}
sprintf("does not have a '%s' attribute", name)
}
}
with_option <- function (code, ...) {
old <- options(...)
on.exit(set(old))
force(code)
}
seed <- gather(1)[[1]]
expect_that(withseed(seed, runif(1), time=T), has_attr('time', 'proc.time'))
ls()
FUN
X
Q
matches
is_a
?expectation
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% a){
if(class == 'any') {
expectation(T, '')
} else {
if(inherits(a[[name]], class)) {
expectation(T, '')
} else {
expectation(F, sprintf("has '%s' attribute but it is not of class '%s'."
, name, class))
}
}
}
excpectation(F, sprintf("does not have a '%s' attribute", name))
}
}
expect_that(withseed(seed, runif(1), time=T), has_attr('time', 'proc.time'))
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% a){
if(class == 'any') {
expectation(T, '')
} else {
if(inherits(a[[name]], class)) {
expectation(T, '')
} else {
expectation(F, sprintf("has '%s' attribute but it is not of class '%s'."
, name, class))
}
}
}
expectation(F, sprintf("does not have a '%s' attribute", name))
}
}
expect_that(withseed(seed, runif(1), time=T), has_attr('time', 'proc.time'))
withseed(seed, runif(1), time=T)
has_time <- has_attr('time', 'proc.time')
expect_that(withseed(seed, runif(1), time=T), has_time)
debug(has_time)
expect_that(withseed(seed, runif(1), time=T), has_time)
x
a
name %in% names(a)
Q
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% names(a){
if(class == 'any') {
expectation(T, '')
} else {
if(inherits(a[[name]], class)) {
expectation(T, '')
} else {
expectation(F, sprintf("has '%s' attribute but it is not of class '%s'."
, name, class))
}
}
}
expectation(F, sprintf("does not have a '%s' attribute", name))
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% names(a){
if(class == 'any') {
expectation(T, '')
} else {
if(inherits(a[[name]], class)) {
expectation(T, '')
} else {
expectation(F, sprintf("has '%s' attribute but it is not of class '%s'."
, name, class))
}
}
}
expectation(F, sprintf("does not have a '%s' attribute", name))
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% names(a)){
if(class == 'any') {
expectation(T, '')
} else {
if(inherits(a[[name]], class)) {
expectation(T, '')
} else {
expectation(F, sprintf("has '%s' attribute but it is not of class '%s'."
, name, class))
}
}
}
expectation(F, sprintf("does not have a '%s' attribute", name))
}
}
has_time <- has_attr('time', 'proc.time')
expect_that(withseed(seed, runif(1), time=T), has_time)
debug(has_time)
expect_that(withseed(seed, runif(1), time=T), has_time)
aq
a
class(a$time)
class='proc_time'
Q
has_attr <- function(name, class='any'){
function(x){
a <- attributes(x)
if(name %in% names(a)){
if(class == 'any') {
expectation(T, '')
} else {
if(inherits(a[[name]], class)) {
expectation(T, '')
} else {
expectation(F, sprintf("has '%s' attribute but it is not of class '%s'."
, name, class))
}
}
} else {
expectation(F, sprintf("does not have a '%s' attribute", name))
}
}
}
has_time <- has_attr('time', 'proc_time')
expect_that(withseed(seed, runif(1), time=T), has_time)
expect_that(with_option(withseed(seed, runif(1)), harvestr.time=T), has_time)
with_option <- function (code, ...) {
old <- options(...)
on.exit(set(old))
force(code)
}
expect_that(with_option(withseed(seed, runif(1)), harvestr.time=T), has_time)
with_option <- function (code, ...) {
old <- options(...)
on.exit(options(old))
force(code)
}
expect_that(with_option(withseed(seed, runif(1)), harvestr.time=T), has_time)
expect_that(farm(seeds, runif(10), time=T), has_time)
options(error=NULL)
load_all()
expect_that(farm(seeds, runif(10), time=T), has_time)
seeds <- gather(3)
expect_that(farm(seeds, runif(10), time=T), has_time)
farm(seeds, runif(10), time=T)
x <- 1
attributes(x)
attributes(x)$time <- 1
x
load_all()
expect_that(farm(seeds, runif(10), time=T), has_time)
farm(seeds, runif(10), time=T)
farm(seeds, runif(10), time=T)
debug(farm)
farm(seeds, runif(10), time=T)
time
laply(results, attr, 'time')
results
llply(results, attr, 'time')
ldply(results, attr, 'time')
laply(results, attr, 'time')
laply(results, attr, 'time')
?colSum
??colsum
colSums(ldply(results, attr, 'time'))
class(.Last.value)
attributes(results)$time <- structure(colSums(times), class = 'proc_time')
times <- ldply(results, attr, 'time')
structure(colSums(times), class = 'proc_time')
attributes(results)$time <- structure(colSums(times), class = 'proc_time')
Q
load_all()
load_all()
farm(seeds, runif(10), time=T)
expect_that(farm(seeds, runif(10), time=T), has_time)
expect_that(with_option(farm(seed, runif(1)), harvestr.time=T), has_time)
expect_that(with_option(farm(seeds, runif(1)), harvestr.time=T), has_time)
reap(seed, mean, time=TRUE)
seed <- farm(1, runif(100))
reap(seed, mean, time=TRUE)
seed
x <- farm(1, runif(100))[[1]]
reap(x, mean, time=TRUE)
expect_that(with_option(reap(x, mean), harvestr.time=T), has_time)
test()
library(harvestr)
library(testthat)
library(dostats)
library(boot)
context("Caching")
cache.dir <- normalizePath(file.path(tempdir(), "harvestr-cache"), mustWork=F)
options(harvestr.cache.dir=cache.dir)
reg.finalizer(emptyenv(), function(...){unlink(cache.dir, TRUE)}, onexit=TRUE)
long_function <- function(){
long_function <- function(){
# should take about a second
rnorm(5e6)
paste("Your luck lotto numbers are:"
, paste(sample(56, 5), collapse=" ")
, '|'
, sample(46, 1), sep=' ')
}
takes_at_least <-function (amount) {
function(expr) {
duration <- system.time(force(expr))["elapsed"]
expectation(duration > amount,
sprintf("took %s seconds, which is more than %s", duration, amount))
}
}
test_that("caching in with seed with long_function", {
seed <- gather(1)[[1]]
unlink(cache.dir, recursive=TRUE, force=TRUE)
t1 <- system.time(run1 <- withseed(seed, long_function(), cache=T))
t2 <- system.time(run2 <- withseed(seed, long_function(), cache=T))
expect_true(all(t2[1] <= t1[1]))
expect_identical(run1, run2)
})
test_that("caching in farm with mean of rnorm", {
seeds <- gather(10)
unlink(cache.dir, recursive=TRUE, force=TRUE)
t1 <- system.time(run1 <- farm(seeds, mean(rnorm(5e6)), cache=T))
t2 <- system.time(run2 <- farm(seeds, mean(rnorm(5e6)), cache=T))
expect_true(all(t2[1] <= t1[1]))
expect_identical(run1, run2)
})
test_that("caching in reap with long sample", {
seed <- gather(1)[[1]]
unlink(cache.dir, recursive=TRUE, force=TRUE)
long_sample <- compose(head, sample)
x <- plant( list(1:1e7), list(seed))[[1]]
t1 <- system.time(run1 <- reap(x, long_sample, cache=T))
t2 <- system.time(run2 <- reap(x, long_sample, cache=T))
expect_true(all(t2[1] <= t1[1]))
expect_identical(run1, run2)
unlink(cache.dir, recursive=TRUE, force=TRUE)
})
test_that('caching in harvest using boot', {
unlink(cache.dir, recursive=TRUE, force=TRUE)
x <- farm(10, rnorm(1e4), cache=T)
t1 <- system.time(run1 <- harvest(x, boot, var, 100, cache=T))
t2 <- system.time(run2 <- harvest(x, boot, var, 100, cache=T))
expect_equal(run1, run2)
expect_true(noattr(t2[1] <= t1[1]))
})
test()
seed <- gather(1)[[1]]
x <- plant(list(1:10), list(seed))[[1]]
a <- reap(x, sample)
b <- withseed(seed, sample(1:10))
expect_identical(a,b)
reap(a)
a
b
options('harvestr.time')
test()
check()
check('.')
check()
check()
install()
using(devtools)
document('.')
document('.')
install()
install('.')
using(devtools)
install('.')
